c
self.nota_fiscal_item_lotes
nota_fiscal_item_lotes
estoque
quantidade
produto.estoque_atual
self
produto
mv.produto.estoque_atual
mv.produto
mv =nota_fiscal.movimento_estoques[0]
nota_fiscal.movimento_estoques[0]
nota_fiscal.movimento_estoques
exit
nota_fiscal.movimento_estoques
nota_fiscal.movimento_estoque
nota_fiscal.movimento
self
exit
produto.estoques.sum(:estoque_atual_lote)
exit
c
n
exit
Produto.find_by(codprd_sac: linha[codprd_sac].to_i)
c
Produto.find_by(codprd_sac: linha[codprd_sac].to_i)
Produto.find_by(codprd_sac: linha[codprd_sac])
linha
estoque.save!
estoque.save
exit
dia.zero?
data
exit
Date.new(ano, mes, dia)
n
exit
n
data
exit
produto.localizacao_estoque.local
produto.localizacao_estoque
produto
item_lote.produto
item_lote.estoque.data_validade
item_lote.estoque
item_lote
item_lote.estoque.lote
item_lote.estoque
item_lote
exit
c
nota_fiscal_item_lotes.firstc
nota_fiscal_item_lotes.first.estoque
nota_fiscal_item_lotes.first
nota_fiscal_item_lotes
self
c
error
n
c
Cfop.find_by(informativo: 'cfop_st_de').codigo
Cfop.find_by(informativo: 'cfop_st_de')
cfop
nota_fiscal.cfop.informativo
nota_fiscal.cfop
nota_fiscal
c
produto.estoque_atual 
params[:qtd_baixa].to_f
params[:estoque_atual_lote]
params[:estoque_atual_lote].to_f
n
self.produto
c
faturamento_parcela[:valor_parcela].gsub('.', '').gsub(',', '.').to_f
faturamento_parcela[:valor_parcela]
faturamento_parcela[:valor_parcela].gsub('R$', '')
faturamento_parcela[:valor_parcela].gsub('R$', '').to_f
@nota_fiscal_faturamento_parcela 
n
c
n
c
n
c
n
c
nota_fiscal.cliente.empresa_governo
nota_fiscal.cfop.cliente_fornecedor_cf
c
produto.situacao_tributaria != 'T'
c
valor
c
valor
valor.gsub('.', '').gsub('R$', '').to_f
c
valor.gsub('.', '').gsub('R$', '').to_f
c
valor.gsub('.', '').gsub('R$', '').to_f
c
valor
formatar_preco(nota_fiscal_item[:preco_total])
c
formatar_preco(nota_fiscal_item[:preco_total])
c
n
@nota_fiscal_item
n
c
exit
indicador_final
n
exit
c
n
Date.new(2021, 06, 01)
Date.new("2021", "06", "01")
linha[data_ultimo_reajuste][0..1]
linha[data_ultimo_reajuste][0..2]
data[0..2]
linha[data_ultimo_reajuste]
linha[bloquear_preco].present?
linha[bloquear_preco].presence
linha[bloquear_preco].presence?
linha[bloquear_preco]
linha[comissao_pc]
linha[estoque_atual].to_i / 100
linha[estoque_atual]
linha[controlar_estoque] == "S"
linha[controlar_estoque]
linha.each_with_index{|li, ind| puts "#{ind} - #{li}"}
linha[22]
linha[21]
linha[20]
linha
linha[data_ultimo_reajuste]
linha[data_inicial_oferta]
linha[situacao].blank? ? 'ATIVO' : linha[situacao]
'ATIVO' || linha[situacao].strip
'ATIVO' || linha[situacao].strip.blank?
'ATIVO' unless linha[situacao].strip.blank?
'ATIVO' unless linha[situacao].strip
linha[situacao].strip || 'ATIVO'
linha[situacao] || 'ATIVO'
linha[situacao].blank?
linha[situacao]
linha
produto
n
c
n
c
nota_fiscal_item[:preco_unitario].gsub('R$', '').to_f
nota_fiscal_item[:preco_unitario].gsub('R$', '')
nota_fiscal_item[:preco_unitario]
n
c
n
exit
movimento_estoque.save!
movimento_estoque.save
n
c
movimento['produto_id']
produto_ids
n
c
nota_fiscal_itens.find_by(produto_id: movimento['produto_id'])
nota_fiscal_itens
movimento
c
nc
n
c
err
StandardError
n
c
exit
c
linha[localizacao_estoque_id].to_i
linha[fornecedor_id].to_i
e
exit
linha[situacao_tributaria].strip
exit
c
linha
c
empresa.cfop
empresa
c
faturamento_parcela[:prazo_pagamento]
c
faturamento_parcela[:prazo_pagamento]
c
faturamento_parcela[:prazo_pagamento]
c
faturamento_parcela[:prazo_pagamento]
c
params
c
@nota_fiscal.nota_fiscal_faturamento_parcelas[2]
@nota_fiscal.nota_fiscal_faturamento_parcelas[1]
@nota_fiscal.nota_fiscal_faturamento_parcelas[0]
@nota_fiscal.nota_fiscal_faturamento_parcelas.count
c
administrador.empresa.movimento_estoques
administrador.empresa
c
NotaFiscalItemLote.all
c
NotaFiscalItemLote.all
exit
nota_fiscal_itens.find_by(produto_id: movimento["produto_id"])
n
c
NotaFiscalItemLote.all
c
x
c
NotaFiscalItemLote.all
c
n
c
cc
movimento["produto_id"]
movimento["produto)id"]
nota_fiscal_itens.select("produto_id")
nota_fiscal_itens.find_by(produto_id: movimento["produto_id"])
nota_fiscal_itens
nota_fiscal_itens.find_by(produto_id: movimento["produto_id"])
nota_fiscal_itens.find_by(nota_fiscal_id: self.id, produto_id: movimento["produto_id"])
n
c
@nota_fiscal_faturamento_parcela
n
faturamento_parcela[:valor_parcela]
n
exit
c
nota_fiscal.valor_total_nota
c
@nota_fiscal.calculo_valor_total_nota
@nota_fiscal.nota_fiscal_itens.sum(:preco_total)
c
n
c
e
n
nn
n
c
