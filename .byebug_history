c
params[:codigo].each{|key, value| puts value}
params[:codigo].each{|key, value| puts key}
params[:codigo].keys
Cfop.new(cfop_params)
exit
Cfop.new(cfop_params)
exit
params[:cfop].keys
params[:cfop].attributes
params[:cfop]
params[:cfop
params[:cfop].atributtes
params[:cfop].atribuutes
params[:cfop]
params
exit
params
exit
cfop_params
c
name == :error
name == :errpr
name == "error"
name
c
n
c
exception
exection
c
params[:notice]
params
n
params
c
n
c
exit
nota_fiscal_item[:preco_unitario].match(/\d+/)[0]
 nota_fiscal_item[:preco_unitario]
c
 nfi.nota_fiscal = @nota_fiscal
nfi.nota_fiscal =
nfi.nota_fiscal = 1
 nfi.nota_fiscal
@nota_fiscal.id
 nfi.nota_fiscal = @nota_fiscal.id
c
params[:nota_fiscal][:nota_fiscal_item][0][:cod_produto]
params[:nota_fiscal][:nota_fiscal_item][0]
params[:nota_fiscal].has_key?(:nota_fiscal_item)
params[:nota_fiscal][:nota_fiscal_item]
params[:nota_fiscal][nota_fiscal_item]
params[:nota_fiscal]
params
c
params
exit
linha[terceiro_id].to_i
n
c
f = a.each_slice(2).map(&:join).join(",").reverse.to_f
f = a.each_slice(2).map(&:join).join(",").reverse.to-f
f = a.each_slice(2).map(&:join).join(",").reverse
f = a.each_slice(2).map(&:join)
f = a.each_slice(2)
a = vl.to_s.chars.reverse
vl = linha[preco_custo_medio].to_i
n
f = a.each_slice(3).map(&:join)
f = a.each_slice(3)
a = vl.to_s.chars.reverse
vl = linha[preco_custo_medio].to_i
b = a.each_slice(3)
a = vl.to_s.chars.reverse
vl.to_s.chars.reverse
vl = linha[preco_custo_medio].to_i
a = vl.to_s.chars.reverse
b = a.each_slice(3)
a.each_slice(3)
a = vl.to_s.chars.reverse
vl.to_s.chars.reverse
vl = linha[preco_custo_medio].to_i
vl.to_s.chars.reverse
n
b = vl.to_s.chars.reverse
n
b = vl.to_s.chars.reverse
vl.to_s.chars.reverse
separate_comma(vl)
vl = linha[preco_custo_medio].to_i
separate_comma(vl)
c
separate_comma(vl)
vl = linha[preco_custo_medio].to_i
separate_comma(10)
n
exit
separate_comma(10)
separate_comma(vl)
vl = linha[preco_custo_medio].to_i
vl = linha[preco_custo_medio]
separate_comma(vl)
c
separate_comma(vl)
number_with_precision()
number_with_precision(@number, :precision => 2, :delimiter => ',')
number_with_precision(vl, :precision => 2, :delimiter => ',')
vl.round 2
vl.round(-2)
vl = linha[preco_custo_medio].to_i
linha[preco_custo_medio].to_i
linha[preco_custo_medio]
n
linha[unidade]
n
linha[situacao_tributaria]
n
linha[situacao].present?? false : true
n
c
Fornecedor.all
@fornecedores
c
err
n
nn
n
exit
c
linha[33]
linha[32]
linha[37]
linha[35]
linha[34]
linha[32]
linha[31]
linha[30]
linha[29]
linha[28]
linha[27]
linha[26]
linha[25]
linha[24]
linha[23]
linha[21]
linha[22]
linha[21]
linha[20]
linha[19]
linha[18]
linha[17]
linha[16]
linha[15]
linha[14]
linha[13]
linha[12]
linha[11]
linha[10]
linha[9]
linha[8]
linha[7]
linha[6]
linha[5]
linha[4]
linha[3]
linha[2]
linha[1]
linha
exit
linha
c
err
n
c
n
c
err
n
c
linha[uf]
linha
err
n
err
n
nn
n
c
exit
linha[19].include?("S")
linha[19].include?("N")
linha[19].include("N")
linha[19].includes("N")
linha[19]
linha[7]
linha[21]
linha[20]
linha[19]
linha[18]
linha[17].to_i
linha[17].to_id
linha[17]
linha[16]
linha[15]
linha[14]
linha[13]
linha[12]
linha[11]
linha[10]
linha[9]
linha[8]
linha[7]
linha[6]
linha[5]
linha[4]
linha[3]
linha[2]
linha[1]
linha[0]
linha
c
linha[2]
linha
n
c
n
c
n
c
@estoque
n
@estoque
c
@estoque
c
@estoque
n
params[:estoque_atual_lote].to_f
n
@estoque.estoque_atual_lote
n
c
n
c
n
params
c
n
params[:data_reposicao]
n
exit
params[:estoque_atual_lote]
params[::estoque_atual_lote]
n
