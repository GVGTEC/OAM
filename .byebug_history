exit
c
n
Date.new(2021, 06, 01)
Date.new("2021", "06", "01")
linha[data_ultimo_reajuste][0..1]
linha[data_ultimo_reajuste][0..2]
data[0..2]
linha[data_ultimo_reajuste]
linha[bloquear_preco].present?
linha[bloquear_preco].presence
linha[bloquear_preco].presence?
linha[bloquear_preco]
linha[comissao_pc]
linha[estoque_atual].to_i / 100
linha[estoque_atual]
linha[controlar_estoque] == "S"
linha[controlar_estoque]
linha.each_with_index{|li, ind| puts "#{ind} - #{li}"}
linha[22]
linha[21]
linha[20]
linha
linha[data_ultimo_reajuste]
linha[data_inicial_oferta]
linha[situacao].blank? ? 'ATIVO' : linha[situacao]
'ATIVO' || linha[situacao].strip
'ATIVO' || linha[situacao].strip.blank?
'ATIVO' unless linha[situacao].strip.blank?
'ATIVO' unless linha[situacao].strip
linha[situacao].strip || 'ATIVO'
linha[situacao] || 'ATIVO'
linha[situacao].blank?
linha[situacao]
linha
produto
n
c
n
c
nota_fiscal_item[:preco_unitario].gsub('R$', '').to_f
nota_fiscal_item[:preco_unitario].gsub('R$', '')
nota_fiscal_item[:preco_unitario]
n
c
n
exit
movimento_estoque.save!
movimento_estoque.save
n
c
movimento['produto_id']
produto_ids
n
c
nota_fiscal_itens.find_by(produto_id: movimento['produto_id'])
nota_fiscal_itens
movimento
c
nc
n
c
err
StandardError
n
c
exit
c
linha[localizacao_estoque_id].to_i
linha[fornecedor_id].to_i
e
exit
linha[situacao_tributaria].strip
exit
c
linha
c
empresa.cfop
empresa
c
faturamento_parcela[:prazo_pagamento]
c
faturamento_parcela[:prazo_pagamento]
c
faturamento_parcela[:prazo_pagamento]
c
faturamento_parcela[:prazo_pagamento]
c
params
c
@nota_fiscal.nota_fiscal_faturamento_parcelas[2]
@nota_fiscal.nota_fiscal_faturamento_parcelas[1]
@nota_fiscal.nota_fiscal_faturamento_parcelas[0]
@nota_fiscal.nota_fiscal_faturamento_parcelas.count
c
administrador.empresa.movimento_estoques
administrador.empresa
c
NotaFiscalItemLote.all
c
NotaFiscalItemLote.all
exit
nota_fiscal_itens.find_by(produto_id: movimento["produto_id"])
n
c
NotaFiscalItemLote.all
c
x
c
NotaFiscalItemLote.all
c
n
c
cc
movimento["produto_id"]
movimento["produto)id"]
nota_fiscal_itens.select("produto_id")
nota_fiscal_itens.find_by(produto_id: movimento["produto_id"])
nota_fiscal_itens
nota_fiscal_itens.find_by(produto_id: movimento["produto_id"])
nota_fiscal_itens.find_by(nota_fiscal_id: self.id, produto_id: movimento["produto_id"])
n
c
@nota_fiscal_faturamento_parcela
n
faturamento_parcela[:valor_parcela]
n
exit
c
nota_fiscal.valor_total_nota
c
@nota_fiscal.calculo_valor_total_nota
@nota_fiscal.nota_fiscal_itens.sum(:preco_total)
c
n
c
e
n
nn
n
c
e
n
c
e
n
c
@nota_fiscal.cliente.consumidor_final
c
self.nota_fiscal.cfop.cliente_fornecedor_cf
self.nota_fiscal.cfop
c
@nota_fiscal_item.calculo_imposto_item(@adm)
redirect_to new_nota_fiscal_nota_fiscal_item_path(@n
n
c
C
Time.zone.now.strftime('%Y-%m-%dT%H:%M:%S')
Time.zone.now.strftime('%Y-%m-%d')
nota_fiscal_params
c
 @movimento_estoques
n
params[:data_inicio].present? && params[:data_fim].present? 
exit
c
params[:produto_id]
produto.id
c
estoque_params[:estoque_atual_lote].to_f
estoque_params
@estoque.produto.estoque_atual
@estoque.estoque_atual_lote
n
c
n
c
n
@estoque = Estoque.find(params[:estoque][:id])
params[:estoque][:id]
params[:id]
c
n
c
exit
@estoque
c
n
c
exit
 params.require(:estoque).permit(:produto_id, :fornecedor_id, :lote, :documento, :ultima_alteracao)
 params.require('/estoques/baixa').permit(:produto_id, :fornecedor_id, :lote, :documento, :ultima_alteracao,
params
c
n
nota_fiscal_imposto
n
c
self.valor_produtos
n
c
self
n
c
preco_total
@nota_fiscal.nota_fiscal_itens.sum(:preco_total)
@nota_fiscal.nota_fiscal_itens
c
@nota_fiscal_item.calculo_imposto_item
@nota_fiscal_item.verifica_cst@nota_fiscal_item.calculo_imposto_item
n
@nota_fiscal_item.verifica_cst
n
c
situacao_tributaria
n
c
n
params[:movimentos]
n
c
@produtos.count
c
@produtos.count
c
@produtos.count
@produtos.all
exit
movimento
movimento["estoque_final"]
movimento["estoque_inicial"]
movimento["qtd"]
movimento["data"].to_date
movimento["origem"]
movimento["estoque_id"]
movimento["produto_id"]
nmovimento["produto_id"]
n
c
movimentos
c
movimentos
moviemntos
movimento
c
movimento
c
movimento
c
mv["produto_id"]
mv["data"].to_datetime
mv["data"].to_date
mv["data"]
mv["produto_id"]
mv = JSON.parse(movimento)
JSON.parse(movimento)
